coeff <- similarity(prgs, same.file=FALSE)
g <- as.igraph(coeff)
#' matrix2dataframe
#'
#' Converts a numeric matrix to a data frame with decreasing or increasing values:
#' first column row index, second column col index and third column the value.
#' If the matrix is symmetrical then just the upper triangle will be considered.
#'
#' @param m numeric: a matrix of values
#' @param decreasing logical: should the sort order be increasing or decreasing (default: \code{TRUE})
#' @param tol numeric: tolerance used to detect if matrix is symmetrical (default: \code{1e-9})
#'
#' @return a data frame with an attribute \code{matrix} with \code{m}
#' @export
#'
#' @examples
#' # non-symmetric
#' x <- matrix(runif(9), ncol=3)
#' matrix2dataframe(x)
#' # symmetric
#' x <- x+t(x)
#' matrix2dataframe(x)
matrix2dataframe <- function(m, decreasing=TRUE, tol=1e-9) {
stopifnot(is.matrix(m))
ret       <- m
if (is.null(colnames(ret))) colnames(ret) <- sprintf("col %.0f", 1:ncol(ret))
if (is.null(rownames(ret))) rownames(ret) <- sprintf("row %.0f", 1:nrow(ret))
diag(ret) <- NA
df <- list(row=NULL, col=NULL, val=NULL)
symmetrical <- (ncol(m)==nrow(m)) && all(abs(m-t(m))<=tol)
while (any(!is.na(ret))) {
maxval <- if (decreasing) max(ret, na.rm=TRUE) else min(ret, na.rm=TRUE)
ind    <- which(ret==maxval, arr.ind = TRUE)
indu   <- if (symmetrical) matrix(ind[ind[,1]<ind[,2],], ncol=2) else ind
df$row <- c(df$row, rownames(ret)[indu[,1]])
df$col <- c(df$col, colnames(ret)[indu[,2]])
df$val <- c(df$val, ret[indu])
ret[ind] <- NA
}
structure(as.data.frame(df), matrix=ret, symmetrical=symmetrical)
}
library("rscc")
files <- list.files(path="~/syncthing/temp/rscc", pattern="*.R$", full.names = TRUE)
prgs  <- sourcecode(files, basename=TRUE)
coeff <- similarity(prgs, same.file=FALSE)
library("rscc")
files <- list.files(path="~/syncthing/temp/rscc", pattern="*.R$", full.names = TRUE)
prgs  <- sourcecode(files, basename=TRUE)
coeff <- similarity(prgs, same.file=FALSE)
devtools::check()
rm(list=ls())
devtools::install()
devtools::install()
library("rscc")
files <- list.files(path="~/syncthing/temp/rscc", pattern="*.R$", full.names = TRUE)
prgs  <- sourcecode(files, basename=TRUE)
coeff <- similarity(prgs, same.file=FALSE)            # variables only
library("rscc")
files <- list.files(path="~/syncthing/temp/rscc", pattern="*.R$", full.names = TRUE)
prgs  <- sourcecode(files, basename=TRUE)
coeff <- similarity(prgs, same.file=FALSE)
library("rscc")
files <- list.files(path="~/syncthing/temp/rscc", pattern="*.R$", full.names = TRUE)
prgs  <- sourcecode(files, basename=TRUE)
coeff <- similarity(prgs, same.file=FALSE)
as.igraph.similarity <- function (x, ...) {
args <- list(...)
args$adjmatrix  <- attr(x, "similarity")
if (is.null(args$mode))     args$mode <- if(attr(x, "symmetrical")) "undirected" else "directed"
if (is.null(args$weighted)) args$weighted <- TRUE
do.call(graph_from_adjacency_matrix, args)
}
g <- as.igraph(coeff)
library("igraph")
as.igraph.similarity <- function (x, ...) {
args <- list(...)
args$adjmatrix  <- attr(x, "similarity")
if (is.null(args$mode))     args$mode <- if(attr(x, "symmetrical")) "undirected" else "directed"
if (is.null(args$weighted)) args$weighted <- TRUE
do.call(graph_from_adjacency_matrix, args)
}
g <- as.igraph(coeff)
plot(g)
files <- list.files(path=system.file("examples", package="rscc"), pattern="*.R$", full.names = TRUE)
prgs  <- sourcecode(files, basename=TRUE)
coeff <- similarity(prgs, same.file=FALSE)
g <- as.igraph(coeff)
plot(g)
coeff <- similarity(prgs)            # variables only
prgs  <- sourcecode(files, basename=TRUE)
coeff <- similarity(prgs)
class(prgs)
?similarity
similarity
library("rscc")
similarity
#' similarity
#'
#' Computes for each pair of sourcecode objects the similarity coefficients and returns
#' a data frame with coefficients in decreasing order. A larger coefficients means a
#' greater similarity. If
#' \itemize{
#' \item \code{type=="vars"} then the results of \code{all.vars(.)},
#' \item \code{type=="funs"} then the results of \code{setdiff(all.names(.), all.vars(.)}, and
#' \item \code{type=="names"} then the results of \code{all.names(.)}
#' }
#' are used.
#'
#' @param prgs sourcecode object
#' @param type character: either \code{"vars"}, \code{"funs"}, \code{"names"} (default: \code{"vars"})
#' @param all logical: should the similarity coefficient computed based on all sourcecode objects or just the two considered (default: \code{FALSE})
#' @param ignore.case logical: If TRUE, case is ignored for computing (default: \code{TRUE})
#' @param minlen integer: minimal name length to be considered (default: \code{2})
#' @param decreasing logical: should the sort order be increasing or decreasing (default: \code{TRUE})
#' @param tol numeric: tolerance used to detect if matrix is symmetrical (default: \code{1e-9})
#' @param coeff character: coefficient to compute (default: \code{"jaccard"}), abbreviations can be used
#' @param same.file logical: should be similarities kept if in same file (default: \code{TRUE})
#'
#' @return a data frame with the results
#' @export
#'
#' @examples
#' # example files are taken from https://CRAN.R-project.org/package=SimilaR
#' files <- list.files(system.file("examples", package="rscc"), "*.R$", full.names=TRUE)
#' prgs  <- sourcecode(files)
#' names(prgs) <- basename(names(prgs))
#' similarity(prgs)            # variables only
#' similarity(prgs, type="f")  # functions only
#' similarity(prgs, type="n")  # all names
similarity <- function (prgs, type=c("vars", "funs", "names"),
all=FALSE, ignore.case=TRUE, minlen=2,
decreasing=TRUE, tol=1e-9, coeff="jaccard", same.file=TRUE) {
stopifnot ("sourcecode" %in% class(prgs))
type    <- match.arg(type)
vars    <- list()
allvars <- NULL
for (file in names(prgs)) {
if (type=="vars") vars[[file]]  <- all.vars(prgs[[file]])
if (type=="names") vars[[file]] <- all.names(prgs[[file]])
if (type=="funs") vars[[file]]  <- setdiff(all.names(prgs[[file]]), all.vars(prgs[[file]]))
if (ignore.case) vars[[file]]   <- tolower(vars[[file]])
if (minlen>1) vars[[file]]      <- vars[[file]][nchar(vars[[file]])>=minlen]
if (all) allvars <- c(allvars, vars[[file]])
}
n   <- length(prgs)
sim <- matrix(0, ncol=n, nrow=n)
for (i in 1:n) {
for (j in 1:n) {
sim[i, j] <- similarity_coeff(vars[[i]], vars[[j]], if(all) allvars else NULL, coeff=coeff)
}
}
colnames(sim) <- rownames(sim) <- names(prgs)
ret <- matrix2dataframe(sim, decreasing=decreasing, tol=tol)
if(!same.file) {
filerow <- sapply(strsplit(ret$row, "[", fixed=TRUE), '[', 1)
filecol <- sapply(strsplit(ret$col, "[", fixed=TRUE), '[', 1)
ret     <- ret[filerow!=filecol,]
}
names(ret)[3] <- coeff
structure(ret, class=c("similarity", class(ret)), similarity=sim)
}
coeff <- similarity(prgs)            # variables only
g <- as.igraph(coeff)
plot(g)
?graph_from_adjacency_matrix
attributes(g)
attr(coeff, "similarity")
prgs  <- sourcecode(files, basename=TRUE, minlines=3)
coeff <- similarity(prgs)            # variables only
g <- as.igraph(coeff)
plot(g)
g <- as.igraph(coeff, diag=FALSE)
plot(g)
devtools::check()
rm(list=ls())
devtools::check()
methods("as.igraph")
methods("igraph")
devtools::check()
devtools::check()
devtools::check()
library("rscc")
files <- list.files(path="~/syncthing/temp/rscc", pattern="*.R$", full.names = TRUE)
files <- list.files(path=system.file("examples", package="rscc"), pattern="*.R$", full.names = TRUE)
prgs  <- sourcecode(files, basename=TRUE, minlines=3)
coeff <- similarity(prgs)            # variables only
g <- as.igraph(coeff, diag=FALSE)
plot(g, edge.width=E(g)$weight)
library("rscc")
files <- list.files(path="~/syncthing/temp/rscc", pattern="*.R$", full.names = TRUE)
files <- list.files(path=system.file("examples", package="rscc"), pattern="*.R$", full.names = TRUE)
prgs  <- sourcecode(files, basename=TRUE, minlines=3)
coeff <- similarity(prgs)            # variables only
g <- as_igraph(coeff, diag=FALSE)
plot(g, edge.width=E(g)$weight)
library("rscc")
files <- list.files(path="~/syncthing/temp/rscc", pattern="*.R$", full.names = TRUE)
files <- list.files(path=system.file("examples", package="rscc"), pattern="*.R$", full.names = TRUE)
prgs  <- sourcecode(files, basename=TRUE, minlines=3)
coeff <- similarity(prgs)            # variables only
g <- as_igraph(coeff, diag=FALSE)
plot(g, edge.width=2+3*E(g)$weight)
library("rscc")
files <- list.files(path="~/syncthing/temp/rscc", pattern="*.R$", full.names = TRUE)
files <- list.files(path=system.file("examples", package="rscc"), pattern="*.R$", full.names = TRUE)
prgs  <- sourcecode(files, basename=TRUE, minlines=3)
coeff <- similarity(prgs)            # variables only
g <- as_igraph(coeff, diag=FALSE)
plot(g, edge.width=3*E(g)$weight)
library("rscc")
files <- list.files(path="~/syncthing/temp/rscc", pattern="*.R$", full.names = TRUE)
files <- list.files(path=system.file("examples", package="rscc"), pattern="*.R$", full.names = TRUE)
prgs  <- sourcecode(files, basename=TRUE, minlines=3)
coeff <- similarity(prgs)            # variables only
g <- as_igraph(coeff, diag=FALSE)
plot(g, edge.width=1+5*E(g)$weight)
library("rscc")
files <- list.files(path="~/syncthing/temp/rscc", pattern="*.R$", full.names = TRUE)
files <- list.files(path=system.file("examples", package="rscc"), pattern="*.R$", full.names = TRUE)
prgs  <- sourcecode(files, basename=TRUE, minlines=3)
coeff <- similarity(prgs)            # variables only
g <- as_igraph(coeff, diag=FALSE)
plot(g, edge.width=1+3*E(g)$weight)
rm(list=ls())
devtools::check()
?E
library("rscc")
files <- list.files(path="~/syncthing/temp/rscc", pattern="*.R$", full.names = TRUE)
files <- list.files(path=system.file("examples", package="rscc"), pattern="*.R$", full.names = TRUE)
prgs  <- sourcecode(files, basename=TRUE, minlines=3)
coeff <- similarity(prgs)            # variables only
g <- as_igraph(coeff, diag=FALSE)
plot(g, edge.width=1+3*E(g)$weight) # thicker edges have higher similarity coefficients
devtools::check()
igraph::E
edge_attr
devtools::check()
devtools::install()
library(rscc)
files <- list.files(system.file("examples", package="rscc"), "*.R$", full.names = TRUE)
prgs  <- sourcecode(files, basename=TRUE, silent=TRUE)
simy  <- similarity(prgs, minlen=4)
#' matrix2dataframe
#'
#' Converts a numeric matrix to a data frame with decreasing or increasing values:
#' first column row index, second column col index and third column the value.
#' If the matrix is symmetrical then just the upper triangle will be considered.
#'
#' @param m numeric: a matrix of values
#' @param decreasing logical: should the sort order be increasing or decreasing (default: \code{TRUE})
#' @param tol numeric: tolerance used to detect if matrix is symmetrical (default: \code{1e-9})
#'
#' @return a data frame with an attribute \code{matrix} with \code{m}
#' @export
#'
#' @examples
#' # non-symmetric
#' x <- matrix(runif(9), ncol=3)
#' matrix2dataframe(x)
#' # symmetric
#' x <- x+t(x)
#' matrix2dataframe(x)
matrix2dataframe <- function(m, decreasing=TRUE, tol=1e-9) {
stopifnot(is.matrix(m))
ret       <- m
if (is.null(colnames(ret))) colnames(ret) <- sprintf("col %.0f", 1:ncol(ret))
if (is.null(rownames(ret))) rownames(ret) <- sprintf("row %.0f", 1:nrow(ret))
diag(ret) <- NA
df <- list(row=NULL, col=NULL, val=NULL)
browser()
symmetrical <- (ncol(m)==nrow(m)) && all(abs(m-t(m))<=tol)
while (any(!is.na(ret))) {
maxval <- if (decreasing) max(ret, na.rm=TRUE) else min(ret, na.rm=TRUE)
ind    <- which(ret==maxval, arr.ind = TRUE)
indu   <- if (symmetrical) matrix(ind[ind[,1]<ind[,2],], ncol=2) else ind
df$row <- c(df$row, rownames(ret)[indu[,1]])
df$col <- c(df$col, colnames(ret)[indu[,2]])
df$val <- c(df$val, ret[indu])
ret[ind] <- NA
}
structure(as.data.frame(df), matrix=ret, symmetrical=symmetrical)
}
files <- list.files(system.file("examples", package="rscc"), "*.R$", full.names = TRUE)
prgs  <- sourcecode(files, basename=TRUE, silent=TRUE)
simy  <- similarity(prgs, minlen=4)
files <- list.files(system.file("examples", package="rscc"), "*.R$", full.names = TRUE)
prgs  <- sourcecode(files, basename=TRUE, silent=TRUE)
simy  <- similarity(prgs, minlen=4)
traceback()
#' similarity
#'
#' Computes for each pair of sourcecode objects the similarity coefficients and returns
#' a data frame with coefficients in decreasing order. A larger coefficients means a
#' greater similarity. If
#' \itemize{
#' \item \code{type=="vars"} then the results of \code{all.vars(.)},
#' \item \code{type=="funs"} then the results of \code{setdiff(all.names(.), all.vars(.)}, and
#' \item \code{type=="names"} then the results of \code{all.names(.)}
#' }
#' are used.
#'
#' @param prgs sourcecode object
#' @param type character: either \code{"vars"}, \code{"funs"}, \code{"names"} (default: \code{"vars"})
#' @param all logical: should the similarity coefficient computed based on all sourcecode objects or just the two considered (default: \code{FALSE})
#' @param ignore.case logical: If TRUE, case is ignored for computing (default: \code{TRUE})
#' @param minlen integer: minimal name length to be considered (default: \code{2})
#' @param decreasing logical: should the sort order be increasing or decreasing (default: \code{TRUE})
#' @param tol numeric: tolerance used to detect if matrix is symmetrical (default: \code{1e-9})
#' @param coeff character: coefficient to compute (default: \code{"jaccard"}), abbreviations can be used
#' @param same.file logical: should be similarities kept if in same file (default: \code{TRUE})
#'
#' @return a data frame with the results
#' @export
#'
#' @examples
#' # example files are taken from https://CRAN.R-project.org/package=SimilaR
#' files <- list.files(system.file("examples", package="rscc"), "*.R$", full.names=TRUE)
#' prgs  <- sourcecode(files)
#' names(prgs) <- basename(names(prgs))
#' similarity(prgs)            # variables only
#' similarity(prgs, type="f")  # functions only
#' similarity(prgs, type="n")  # all names
similarity <- function (prgs, type=c("vars", "funs", "names"),
all=FALSE, ignore.case=TRUE, minlen=2,
decreasing=TRUE, tol=1e-9, coeff="jaccard", same.file=TRUE) {
stopifnot ("sourcecode" %in% class(prgs))
type    <- match.arg(type)
vars    <- list()
allvars <- NULL
for (file in names(prgs)) {
if (type=="vars") vars[[file]]  <- all.vars(prgs[[file]])
if (type=="names") vars[[file]] <- all.names(prgs[[file]])
if (type=="funs") vars[[file]]  <- setdiff(all.names(prgs[[file]]), all.vars(prgs[[file]]))
if (ignore.case) vars[[file]]   <- tolower(vars[[file]])
if (minlen>1) vars[[file]]      <- vars[[file]][nchar(vars[[file]])>=minlen]
if (all) allvars <- c(allvars, vars[[file]])
}
n   <- length(prgs)
sim <- matrix(0, ncol=n, nrow=n)
for (i in 1:n) {
for (j in 1:n) {
sim[i, j] <- similarity_coeff(vars[[i]], vars[[j]], if(all) allvars else NULL, coeff=coeff)
}
}
colnames(sim) <- rownames(sim) <- names(prgs)
ret <- matrix2dataframe(sim, decreasing=decreasing, tol=tol)
if(!same.file) {
filerow <- sapply(strsplit(ret$row, "[", fixed=TRUE), '[', 1)
filecol <- sapply(strsplit(ret$col, "[", fixed=TRUE), '[', 1)
ret     <- ret[filerow!=filecol,]
}
names(ret)[3] <- coeff
structure(ret, class=c("similarity", class(ret)), similarity=sim)
}
files <- list.files(system.file("examples", package="rscc"), "*.R$", full.names = TRUE)
prgs  <- sourcecode(files, basename=TRUE, silent=TRUE)
simy  <- similarity(prgs, minlen=4)
m
?which
files <- list.files(system.file("examples", package="rscc"), "*.R$", full.names = TRUE)
prgs  <- sourcecode(files, basename=TRUE, silent=TRUE)
simy  <- similarity(prgs, minlen=4)
?abs
?all
#' matrix2dataframe
#'
#' Converts a numeric matrix to a data frame with decreasing or increasing values:
#' first column row index, second column col index and third column the value.
#' If the matrix is symmetrical then just the upper triangle will be considered.
#'
#' @param m numeric: a matrix of values
#' @param decreasing logical: should the sort order be increasing or decreasing (default: \code{TRUE})
#' @param tol numeric: tolerance used to detect if matrix is symmetrical (default: \code{1e-9})
#'
#' @return a data frame with an attribute \code{matrix} with \code{m}
#' @export
#'
#' @examples
#' # non-symmetric
#' x <- matrix(runif(9), ncol=3)
#' matrix2dataframe(x)
#' # symmetric
#' x <- x+t(x)
#' matrix2dataframe(x)
matrix2dataframe <- function(m, decreasing=TRUE, tol=1e-9) {
stopifnot(is.matrix(m))
ret       <- m
if (is.null(colnames(ret))) colnames(ret) <- sprintf("col %.0f", 1:ncol(ret))
if (is.null(rownames(ret))) rownames(ret) <- sprintf("row %.0f", 1:nrow(ret))
diag(ret) <- NA
df <- list(row=NULL, col=NULL, val=NULL)
symmetrical <- (ncol(m)==nrow(m)) && all(abs(m-t(m))<=tol, na.rm=TRUE)
while (any(!is.na(ret))) {
maxval <- if (decreasing) max(ret, na.rm=TRUE) else min(ret, na.rm=TRUE)
ind    <- which(ret==maxval, arr.ind = TRUE)
indu   <- if (symmetrical) matrix(ind[ind[,1]<ind[,2],], ncol=2) else ind
df$row <- c(df$row, rownames(ret)[indu[,1]])
df$col <- c(df$col, colnames(ret)[indu[,2]])
df$val <- c(df$val, ret[indu])
ret[ind] <- NA
}
structure(as.data.frame(df), matrix=ret, symmetrical=symmetrical)
}
files <- list.files(system.file("examples", package="rscc"), "*.R$", full.names = TRUE)
prgs  <- sourcecode(files, basename=TRUE, silent=TRUE)
simy  <- similarity(prgs, minlen=4)
#' similarity_coeff
#'
#' Computes a similarity coefficient based on the unique elements \code{set1} and \code{set2} in relation to \code{setfull}.
#' If \code{setfull} is \code{NULL} then \code{setfull} is set to \code{unique(c(set1, set2))}.
#'
#' @param set1 vector: elements to compare
#' @param set2 vector: elements to compare
#' @param setfull vector: elements to compare (default: \code{NULL})
#' @param coeff character: coefficient to compute (default: \code{"jaccard"}), abbreviations can be used
#'
#' @return a numeric similarity coefficient
#' @export
#'
#' @examples
#' s1 <- 1:3
#' s2 <- 1:5
#' similarity_coeff(s1, s2)
#' s1 <- letters[1:3]
#' s2 <- LETTERS[1:5]
#' similarity_coeff(s1, s2)
similarity_coeff <- function(set1, set2, setfull=NULL,
coeff=c("jaccard", "braun", "dice", "hamann", "kappa", "kulczynski", "ochiai",
"phi", "russelrao", "matching", "simpson", "sneath", "tanimoto", "yule")) {
coeff   <- match.arg(coeff)
if (is.null(setfull)) setfull <- c(set1, set2)
setfull <- unique(setfull)
inset1 <- setfull %in% unique(set1)
inset2 <- setfull %in% unique(set2)
p   <- length(setfull)
n11 <- sum(inset1 & inset2)
n10 <- sum(inset1 & !inset2)
n01 <- sum(!inset1 & inset2)
n00 <- sum(!inset1 & !inset2)
browser()
if (coeff=="jaccard") return (n11/(n01+n10+n11))
if (coeff=="braun") return (n11/max(n01+n11, n10+n11))
if (coeff=="dice") return (2*n11/(n01+n10+2*n11))
if (coeff=="kappa") return (1/(1+p/2*(n01+n10)/(n00*n11-n01*n10)))
if (coeff=="kulczynski") return (n11/(n01+n10))
if (coeff=="ochiai") return (n11/sqrt((n11+n10)*(n11+n10)))
if (coeff=="phi") return ((n11*n00-n10*n01)/sqrt((n11+n10)*(n11+n10)*(n00+n10)*(n00+n10)))
if (coeff=="russelrao") return (n11/p)
if (coeff=="matching") return ((n00+n11)/p)
if (coeff=="simpson") return (n11/min(n01+n11, n10+n11))
if (coeff=="sneath") return (n11/(n11+2*n01+2*n10))
if (coeff=="tanimoto") return ((n11+n00)/(n11+2*n01+2*n10+n00))
if (coeff=="yule") return ((n11*n00-n01*n10)/(n11*n00-n01*n10))
NA
}
files <- list.files(system.file("examples", package="rscc"), "*.R$", full.names = TRUE)
prgs  <- sourcecode(files, basename=TRUE, silent=TRUE)
simy  <- similarity(prgs, minlen=4)
setfull
?switch ,
case = action
)
?switch
rm(list=ls())
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::install()
devtools::install()
devtools::check()
devtools::install()
devtools::install()
files <- list.files(system.file("examples", package="rscc"), "*.R$", full.names = TRUE)
prgs  <- sourcecode(files, basename=TRUE, silent=TRUE)
devtools::install()
files <- list.files(system.file("examples", package="rscc"), "*.R$", full.names = TRUE)
prgs  <- sourcecode(files, basename=TRUE, silent=TRUE)
library(rscc)
files <- list.files(system.file("examples", package="rscc"), "*.R$", full.names = TRUE)
prgs  <- sourcecode(files, basename=TRUE, silent=TRUE)
simy  <- similarity(prgs, minlen=4)
head(simy)
?outer
devtools::check()
devtools::install()
devtools::install()
files <- list.files(system.file("examples", package="rscc"), "*.R$", full.names = TRUE)
prgs  <- sourcecode(files, basename=TRUE, silent=TRUE, minlines=1)
library("rscc")
devtools::install()
library("rscc")
devtools::install()
library("rscc")
library(rscc)
files <- list.files(system.file("examples", package="rscc"), "*.R$", full.names = TRUE)
prgs  <- sourcecode(files, basename=TRUE, silent=TRUE, minlines=1)
simy  <- similarity(prgs)
attr(simy, "similarity")
simy  <- similarity(prgs, same.file=FALSE)
devtools::install()
library("rscc")
files <- list.files(system.file("examples", package="rscc"), "*.R$", full.names = TRUE)
prgs  <- sourcecode(files, basename=TRUE, silent=TRUE, minlines=1)
simy  <- similarity(prgs)
attr(simy, "similarity")
simy  <- similarity(prgs, same.file=FALSE)
devtools::check()
devtools::check()
devtools::install()
devtools::install()
devtools::install()
